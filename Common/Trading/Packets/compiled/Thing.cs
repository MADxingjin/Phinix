// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packets/Thing.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Trading {

  /// <summary>Holder for reflection information generated from Packets/Thing.proto</summary>
  public static partial class ThingReflection {

    #region Descriptor
    /// <summary>File descriptor for Packets/Thing.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ThingReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNQYWNrZXRzL1RoaW5nLnByb3RvEgdUcmFkaW5nIooBCgVUaGluZxIPCgdE",
            "ZWZOYW1lGAEgASgJEhIKClN0YWNrQ291bnQYAiABKAUSFAoMU3R1ZmZEZWZO",
            "YW1lGAMgASgJEg8KB1F1YWxpdHkYBCABKAUSEQoJSGl0UG9pbnRzGAUgASgF",
            "EiIKCklubmVyVGhpbmcYBiABKAsyDi5UcmFkaW5nLlRoaW5nYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Trading.Thing), global::Trading.Thing.Parser, new[]{ "DefName", "StackCount", "StuffDefName", "Quality", "HitPoints", "InnerThing" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Thing : pb::IMessage<Thing> {
    private static readonly pb::MessageParser<Thing> _parser = new pb::MessageParser<Thing>(() => new Thing());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Thing> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Trading.ThingReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Thing() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Thing(Thing other) : this() {
      defName_ = other.defName_;
      stackCount_ = other.stackCount_;
      stuffDefName_ = other.stuffDefName_;
      quality_ = other.quality_;
      hitPoints_ = other.hitPoints_;
      InnerThing = other.innerThing_ != null ? other.InnerThing.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Thing Clone() {
      return new Thing(this);
    }

    /// <summary>Field number for the "DefName" field.</summary>
    public const int DefNameFieldNumber = 1;
    private string defName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DefName {
      get { return defName_; }
      set {
        defName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "StackCount" field.</summary>
    public const int StackCountFieldNumber = 2;
    private int stackCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StackCount {
      get { return stackCount_; }
      set {
        stackCount_ = value;
      }
    }

    /// <summary>Field number for the "StuffDefName" field.</summary>
    public const int StuffDefNameFieldNumber = 3;
    private string stuffDefName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StuffDefName {
      get { return stuffDefName_; }
      set {
        stuffDefName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Quality" field.</summary>
    public const int QualityFieldNumber = 4;
    private int quality_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Quality {
      get { return quality_; }
      set {
        quality_ = value;
      }
    }

    /// <summary>Field number for the "HitPoints" field.</summary>
    public const int HitPointsFieldNumber = 5;
    private int hitPoints_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitPoints {
      get { return hitPoints_; }
      set {
        hitPoints_ = value;
      }
    }

    /// <summary>Field number for the "InnerThing" field.</summary>
    public const int InnerThingFieldNumber = 6;
    private global::Trading.Thing innerThing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Trading.Thing InnerThing {
      get { return innerThing_; }
      set {
        innerThing_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Thing);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Thing other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DefName != other.DefName) return false;
      if (StackCount != other.StackCount) return false;
      if (StuffDefName != other.StuffDefName) return false;
      if (Quality != other.Quality) return false;
      if (HitPoints != other.HitPoints) return false;
      if (!object.Equals(InnerThing, other.InnerThing)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DefName.Length != 0) hash ^= DefName.GetHashCode();
      if (StackCount != 0) hash ^= StackCount.GetHashCode();
      if (StuffDefName.Length != 0) hash ^= StuffDefName.GetHashCode();
      if (Quality != 0) hash ^= Quality.GetHashCode();
      if (HitPoints != 0) hash ^= HitPoints.GetHashCode();
      if (innerThing_ != null) hash ^= InnerThing.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DefName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DefName);
      }
      if (StackCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(StackCount);
      }
      if (StuffDefName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(StuffDefName);
      }
      if (Quality != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Quality);
      }
      if (HitPoints != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(HitPoints);
      }
      if (innerThing_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(InnerThing);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DefName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DefName);
      }
      if (StackCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StackCount);
      }
      if (StuffDefName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StuffDefName);
      }
      if (Quality != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Quality);
      }
      if (HitPoints != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitPoints);
      }
      if (innerThing_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InnerThing);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Thing other) {
      if (other == null) {
        return;
      }
      if (other.DefName.Length != 0) {
        DefName = other.DefName;
      }
      if (other.StackCount != 0) {
        StackCount = other.StackCount;
      }
      if (other.StuffDefName.Length != 0) {
        StuffDefName = other.StuffDefName;
      }
      if (other.Quality != 0) {
        Quality = other.Quality;
      }
      if (other.HitPoints != 0) {
        HitPoints = other.HitPoints;
      }
      if (other.innerThing_ != null) {
        if (innerThing_ == null) {
          innerThing_ = new global::Trading.Thing();
        }
        InnerThing.MergeFrom(other.InnerThing);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            DefName = input.ReadString();
            break;
          }
          case 16: {
            StackCount = input.ReadInt32();
            break;
          }
          case 26: {
            StuffDefName = input.ReadString();
            break;
          }
          case 32: {
            Quality = input.ReadInt32();
            break;
          }
          case 40: {
            HitPoints = input.ReadInt32();
            break;
          }
          case 50: {
            if (innerThing_ == null) {
              innerThing_ = new global::Trading.Thing();
            }
            input.ReadMessage(innerThing_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
